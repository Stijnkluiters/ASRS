import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;

public class AppBPP {
    public JPanel mainFrame;
    private JPanel algorithmSelector;
    private JRadioButton firstFit;
    private JRadioButton firstFitDecreasing;
    private JRadioButton nextFit;
    private JRadioButton worstFit;
    private JButton start;
    /**
     * Niet echt een BoxDisplayPanel omdat Intellij een beetje raar doet.
     * Het is een instansie van JPanel.
     */
    private BoxDisplayPanel boxDisplayPanel1;
    private JRadioButton firstFitIncreasing;

    private JScrollPane scrollPane;
    private XmlImporter xmlImporter;
    private ArrayList<Product> products;
    private BPPArduino arduino;

    public void setProducts(ArrayList<Product> products) {
        this.products = products;
    }

    private void createUIComponents() {

    }

    public AppBPP() {
        this.createUIComponents();
        $$$setupUI$$$();
        this.scrollPane.setMaximumSize(new Dimension(1000, 1000));
        this.scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        this.scrollPane.setPreferredSize(new Dimension(2500, 1000));
        this.scrollPane.getVerticalScrollBar().setUnitIncrement(12);
        start.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Er is op de knop gedrukt

                int algoritme = getSelectedOption();

                if (algoritme != 5) {
                    AlgorithmStarter starter = new AlgorithmStarter(products);
                    starter.startAlgorithm(algoritme);
                    boxDisplayPanel1.setBoxes(starter.getBoxes());
                    boxDisplayPanel1.updateGrid();
                    arduino.setBoxes(starter.getBoxes());
                }

            }
        });
    }

    private int getSelectedOption() {
        if (firstFit.isSelected()) {
            return 0;
        }
        if (firstFitDecreasing.isSelected()) {
            return 1;
        }
        if (firstFitIncreasing.isSelected()) {
            return 2;
        }
        if (worstFit.isSelected()) {
            return 3;
        }

        if (nextFit.isSelected()) {
            return 4;
        }
        JOptionPane.showMessageDialog(null, "Geen algoritme geselecteerd");
        return 5;
    }

    public void start() {
        JFrame frame = new JFrame("AppBPP");
        frame.setContentPane(this.mainFrame);

        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    public void setArduino(BPPArduino arduino) {
        this.arduino = arduino;
    }


    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainFrame = new JPanel();
        mainFrame.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainFrame.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        algorithmSelector = new JPanel();
        algorithmSelector.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(6, 4, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(algorithmSelector, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(300, 125), null, 1, false));
        firstFit = new JRadioButton();
        firstFit.setText("First fit algorithm");
        algorithmSelector.add(firstFit, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 4, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        firstFitDecreasing = new JRadioButton();
        firstFitDecreasing.setText("First fit decreasing algorithm");
        algorithmSelector.add(firstFitDecreasing, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 4, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nextFit = new JRadioButton();
        nextFit.setText("Next fit algorithm");
        algorithmSelector.add(nextFit, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 4, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        worstFit = new JRadioButton();
        worstFit.setText("Worst fit algorithm");
        algorithmSelector.add(worstFit, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        start = new JButton();
        start.setText("Start Calculation");
        algorithmSelector.add(start, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        firstFitIncreasing = new JRadioButton();
        firstFitIncreasing.setText("First fit increasing algorithm");
        algorithmSelector.add(firstFitIncreasing, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        scrollPane = new JScrollPane();
        mainFrame.add(scrollPane, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        boxDisplayPanel1 = new BoxDisplayPanel();
        scrollPane.setViewportView(boxDisplayPanel1);
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(firstFit);
        buttonGroup.add(firstFitDecreasing);
        buttonGroup.add(nextFit);
        buttonGroup.add(worstFit);
        buttonGroup.add(firstFitIncreasing);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainFrame;
    }
}
